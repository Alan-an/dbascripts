#!/bin/env python

##################################################################################################
#  Name:        awr_snaps                                                                        #
#  Author:      Randy Johnson                                                                    #
#  Description: Reports AWR Snapshots and the times they were taken.                             #
#                                                                                                #
#  usage: awr_snaps [options]                                                                    #
#                                                                                                #
#  options:                                                                                      #
#    -h, --help  show this help message and exit                                                 #
#    -d DAYS     how many days?                                                                  #
#    -i INST     which instance?                                                                 #
#    -s          print SQL query.                                                                #
#    -v          print version info.                                                             #
#                                                                                                #
# History:                                                                                       #
#                                                                                                #
# Date       Ver. Who              Change Description                                            #
# ---------- ---- ---------------- ------------------------------------------------------------- #
# 07/01/2014 1.00 Randy Johnson    Initial write                                                 #
# 07/02/2014 1.01 Randy Johnson    Minor changes/upgrades.                                       #
# 07/17/2015 2.00 Randy Johnson    Updated for Python 2.4-3.4 compatibility.                     #
# 08/01/2015 2.10 Randy Johnson    Added prompts for username, password, tnsname.                #
##################################################################################################

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from optparse     import OptionParser
from os           import environ
from os.path      import basename
from sys          import argv
from sys          import exit
from sys          import version_info
from signal       import SIGPIPE
from signal       import SIG_DFL
from signal       import signal
from Oracle       import RunSqlplus
from Oracle       import SetOracleEnv
from Oracle       import ParseConnectString


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0]).split('.')[0]
  CmdDesc        = 'AWR Snapshots (awr_snaps)'
  Version        = '2.10'
  VersionDate    = 'Tue Sep 15 21:02:11 CDT 2015'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Sql            = ''
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ErrChk         = False
  ArgParser      = OptionParser()
  InStr          = ''
  TnsName        = ''
  Username       = ''
  Password       = ''
  ConnStr        = ''
  InstList       = []

  # For handling termination in stdout pipe; ex: when you run: oerrdump | head
  signal(SIGPIPE, SIG_DFL)

  ArgParser.add_option("-d",  dest="Days",                           default=0,                          type=int, help="how many days? (default 0  = unlimited")
  ArgParser.add_option('-i',  dest='Instances',                      default='',                         type=str, help="where inst_id in 1,2,3,...")
  ArgParser.add_option('-r',  dest='Rows',                           default=0,                          type=int, help="limit output to nnn rows (default 0  = unlimited)")
  ArgParser.add_option("--s", dest="Show",                           default=False, action="store_true",           help="print SQL query.")
  ArgParser.add_option('--v', dest='ShowVer', action='store_true',   default=False,                                help="print version info.")
  
  # Parse command line arguments
  Options, args = ArgParser.parse_args()
  
  Days      = Options.Days
  Instances = Options.Instances
  Rows      = str(Options.Rows)
  Show      = Options.Show
  ShowVer   = Options.ShowVer

  if (ShowVer == True):
    print('\n%s' % Banner)
    exit()

  if (Days > 0):
    Days = str(Days - 1)
  else:
    Days = '99999'

  if(Instances != ''):
    InstList = Instances.split(',')
    try:
      if (version_info[0] >= 3):
        InstList = list(map(int, InstList))
        InstList = list(map(str, InstList))
      else:
        InstList = map(int, InstList)
        InstList = map(str, InstList)
    except:
      print("Instance list must be in integer form, eg. -i 1,2,3,4")
      exit(1)

  Sql += "column snap_id             format a10           heading 'Snap ID'\n"
  Sql += "column inst                format a4            heading 'Inst'\n"
  Sql += "column snap_level          format 99999         heading 'Snap Level'\n"
  Sql += "column start_time          format a22           heading 'Start Time'\n"
  Sql += "column end_time            format a22           heading 'End Time'\n"
  Sql += "\n"
  Sql += "column bounce noprint\n"
  Sql += "\n"
  Sql += "break on bounce skip 1\n"
  Sql += "\n"
  Sql += "  SELECT " + SqlHeader + "\n"
  Sql += "         TO_CHAR(snap_id) snap_id\n"
  Sql += "       , TO_CHAR(inst_number) inst\n"
  Sql += "       , start_time\n"
  Sql += "       , end_time\n"
  Sql += "       , snap_level\n"
  Sql += "       , CASE\n"
  Sql += "             WHEN startup_time = prev_startup_time THEN 0\n"
  Sql += "             ELSE 1\n"
  Sql += "         END AS bounce\n"
  Sql += "    FROM (SELECT snap_id\n"
  Sql += "               , instance_number      inst_number\n"
  Sql += "               , TO_CHAR(begin_interval_time, 'YYYY-MM-DD HH:MI:SS AM') start_time\n"
  Sql += "               , TO_CHAR(end_interval_time,   'YYYY-MM-DD HH:MI:SS AM') end_time\n"
  #Sql += "               , end_interval_time    end_time\n"
  Sql += "               , snap_level\n"
  Sql += "               , flush_elapsed\n"
  Sql += "               , LAG(startup_time) OVER (PARTITION BY dbid, instance_number ORDER BY snap_id) prev_startup_time\n"
  Sql += "               , startup_time\n"
  Sql += "            FROM dba_hist_snapshot\n"
  if (InstList != [] or Days != '0' or Rows != '0'):
    Sql += "           WHERE 1=1\n"
    if (InstList != []):
      Sql += "             AND instance_number IN (" + Instances + ")\n"    
    Sql += "             AND TRUNC(begin_interval_time) >= TRUNC(SYSDATE - " + Days + ")\n"
    if (Rows != '0'):
      Sql += "             AND rownum <= " + Rows + "\n";
  Sql += "         )\n"
  Sql += "ORDER BY snap_id\n"
  Sql += "       , inst\n"
  Sql += "       , start_time;"
         
  Sql = Sql.strip()

  if(Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Check/setup the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  # Parse the connect string if any, prompt for username, password if needed.
  if (len(args) > 0 and Show == False):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)

  # Execute the report
  if (ConnStr != ''):
    (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
  else:
    (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)

  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
