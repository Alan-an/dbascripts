#!/bin/env python

##################################################################################################
# Name:        dbfeatusage                                                                       #
# Author:      Randy Johnson                                                                     #
# Description: Report Database Features in Use.                                                  #
#                                                                                                #
# Usage: dbfeatusage [options]                                                                   #
#                                                                                                #
# Options:                                                                                       #
#   -h, --help  show this help message and exit                                                  #
#   -o ORDERBY  order by 1,2,3 ...                                                               #
#   -n NAME     where feature name like...                                                       #
#   -u          update the feature usage table before report.                                    #
#   --s         print SQL query.                                                                 #
#   --v         print version info.                                                              #
#                                                                                                #
# History:                                                                                       #
#                                                                                                #
# Date       Ver. Who              Change Description                                            #
# ---------- ---- ---------------- ------------------------------------------------------------- #
# 09/16/2015 1.00 Randy Johnson    Initial write.                                                #
##################################################################################################

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from optparse     import OptionParser
from os           import environ
from os.path      import basename
from sys          import argv
from sys          import exit
from sys          import version_info
from signal       import SIGPIPE
from signal       import SIG_DFL
from signal       import signal
from Oracle       import RunSqlplus
from Oracle       import SetOracleEnv
from Oracle       import ParseConnectString
from Oracle       import PrintError


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0]).split('.')[0]
  CmdDesc        = 'Database Feature Usage'
  Version        = '1.00'
  VersionDate    = 'Tue Sep 15 21:02:11 CDT 2015'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Sql            = ''
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ErrChk         = False
  ArgParser      = OptionParser()
  ConnStr        = ''

  # For handling termination in stdout pipe; ex: when you run: oerrdump | head
  signal(SIGPIPE, SIG_DFL)

  ArgParser.add_option('-o',  dest='OrderBy',                      default='1',   type=str,  help="order by 1,2,3 ...")
  ArgParser.add_option('-n',  dest='Name',                         default='',    type=str,  help="where feature name like...")
  ArgParser.add_option('-u',  dest='Update',  action='store_true', default=False,            help="update the feature usage table before report.")
  ArgParser.add_option('--s', dest='Show',    action='store_true', default=False,            help="print SQL query.")
  ArgParser.add_option('--v', dest='ShowVer', action='store_true', default=False,            help="print version info.")

  # Parse command line arguments
  Options, args = ArgParser.parse_args()

  Update      = Options.Update
  OrderBy     = Options.OrderBy
  Name        = Options.Name
  Show        = Options.Show
  ShowVer     = Options.ShowVer

  if (ShowVer == True):
    print('\n%s' % Banner)
    exit()

  if (Update):
    Sql += "execute dbms_feature_usage_internal.exec_db_usage_sampling(SYSDATE)\n"
    Sql += "\n"
  Sql += "column name            format a60             heading 'Name'\n"
  Sql += "column detected_usages format 999,999,999,999 heading 'Usage Count'\n"
  Sql += "column currently_used  format a14             heading 'Currently Used'\n"
  Sql += "column version         format a12             heading 'Version'\n"
  Sql += "\n"
  Sql += "  SELECT " + SqlHeader + "\n"
  Sql += "         u1.name\n"
  Sql += "       , u1.detected_usages\n"
  Sql += "       , INITCAP(u1.currently_used) currently_used\n"
  Sql += "       , u1.version\n"
  Sql += "    FROM dba_feature_usage_statistics u1\n"
  Sql += "   WHERE version = (SELECT MAX(u2.version)\n"
  Sql += "                      FROM dba_feature_usage_statistics u2\n"
  Sql += "                     WHERE u2.name = u1.name\n"
  Sql += "                   )\n"
  Sql += "     AND u1.detected_usages > 0\n"
  Sql += "     AND u1.dbid = (SELECT dbid FROM v$database)\n"
  if (Name != ""):
    Sql += "     AND UPPER(u1.name) LIKE '%" + Name.upper() + "%'\n"
  Sql += "ORDER BY " + OrderBy + ";"
  
  if(Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Check/setup the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  # Parse the connect string if any, prompt for username, password if needed.
  if (len(args) > 0 and Show == False):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)

  # Execute the report
  if (ConnStr != ''):
    (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
  else:
    (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)

  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
