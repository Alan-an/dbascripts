#!/bin/env python

##################################################################################################
#  Name:        snapset                                                                          #
#  Author:      Randy Johnson                                                                    #
#  Description: Set AWR snapshot frequency and retention.                                        #
#                                                                                                #
#  usage: snapset [options]                                                                      #
#                                                                                                #
#  options:                                                                                      #
#    -h, --help      show this help message and exit                                             #
#    -i INST_NUM     value for instance_number                                                   #
#    -b END_SNAP_ID  value for begin_snap                                                        #
#    -e END_SNAP_ID  value for end_snap                                                          #
#    -l LINE_LIMIT   value for rownum                                                            #
#    -s              print SQL query.                                                            #
#    -v              print version info.                                                         #
#                                                                                                #
# History:                                                                                       #
#                                                                                                #
# Date       Ver. Who              Change Description                                            #
# ---------- ---- ---------------- ------------------------------------------------------------- #
# 05/29/2014 1.00 Randy Johnson    Initial write.                                                #
# 05/29/2014 1.10 Randy Johnson    Fixed bug -- was using retention minutes. Should be days.     #
# 07/17/2015 2.00 Randy Johnson    Updated for Python 2.4-3.4 compatibility.                     #
#                                  Added prompts for username, password, tnsname.                #
# 08/24/2015 2.10 Randy Johnson    Bug fix in the code generation for the call to                #
#                                  dbms_workload_repository. Also some cosmetic Sql changes.     #
##################################################################################################

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from optparse     import OptionParser
from os           import environ
from os.path      import basename
from sys          import argv
from sys          import exit
from sys          import version_info
from signal       import SIGPIPE
from signal       import SIG_DFL
from signal       import signal
from Oracle       import RunSqlplus
from Oracle       import SetOracleEnv
from Oracle       import ParseConnectString
from Oracle       import PrintError


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0]).split('.')[0]
  CmdDesc        = 'Set AWR Snapshot Frequency and Retention'
  Version        = '2.10'
  VersionDate    = 'Tue Sep 15 21:02:11 CDT 2015'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Sql            = ''
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ErrChk         = True
  ArgParser      = OptionParser()
  InStr          = ''
  ConnStr        = ''

  # For handling termination in stdout pipe; ex: when you run: oerrdump | head
  signal(SIGPIPE, SIG_DFL)

  ArgParser.add_option("-r",  dest="RetDays",                      default=0,     type=int, help="value for snapshot retention")
  ArgParser.add_option("-i",  dest="IntMins",                      default=0,     type=int, help="value for snapshot interval")
  ArgParser.add_option('--s', dest='Show',    action='store_true', default=False,           help="print SQL query.")
  ArgParser.add_option('--v', dest='ShowVer', action='store_true', default=False,           help="print version info.")
  
  # Parse command line arguments
  Options, args = ArgParser.parse_args()

  RetDays   = Options.RetDays
  IntMins   = Options.IntMins
  Show      = Options.Show
  ShowVer   = Options.ShowVer
  
  if (ShowVer):
    print('\n%s' % Banner)
    exit()

  RetMins = RetDays * 1440

  if (IntMins > 0 or RetMins > 0):
    Sql += SqlHeader + "\n"
    Sql += "BEGIN\n"
    Sql += "   dbms_workload_repository.modify_snapshot_settings (\n"
    if (RetDays > 0):
      if (IntMins > 0):
        Sql += "      retention => %-1d,     -- (%1d days)\n" % (RetMins, RetDays)
      else:
        Sql += "      retention => %-1d      -- (%1d days)\n" % (RetMins, RetDays)

    if (IntMins > 0):
      Sql += "      interval  => %-1d          -- (minutes)\n" % IntMins

    Sql += "   );\n"
    Sql += "END;\n"
    Sql += "/\n\n"
  else:
    print("\nNo changes specified. Try -h option for help.")
    exit(1)

  Sql = Sql.strip()
  
  if(Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Check/setup the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  # Parse the connect string if any, prompt for username, password if needed.
  if (len(args) > 0 and not Show):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)

  print("\nSetting AWR snapshot frequency to interval of %s minutes, and retention to %s days." % (IntMins, RetDays))

  # Execute
  if (ConnStr != ''):
    (rc, Stdout, ErrorList) = RunSqlplus(Sql, ErrChk, ConnStr)
  else:
    (rc, Stdout, ErrorList) = RunSqlplus(Sql, ErrChk)

  if(rc != 0):
    print("\nError in call to  dbms_workload_repository.modify_snapshot_settings()")
    PrintError(Sql, Stdout, ErrorList)
    exit(1)
  else:
    Stdout = Stdout.strip()
    
  print("\nConfirm changes below...")

  Sql  = "column int_min format a10 heading \"Interval|Minutes\"\n"
  Sql += "column ret_min format a10 heading \"Retention|Days\"\n"
  Sql += "column topnsql format a20 heading \"TopNSQL\"\n"
  Sql += "\n"
  Sql += "SELECT TO_CHAR(  EXTRACT( day    from snap_interval ) * 24 * 60 +\n"
  Sql += "                 EXTRACT( hour   from snap_interval ) * 60 +\n"
  Sql += "                 EXTRACT( minute from snap_interval ))               int_min\n"
  Sql += "     , TO_CHAR(( EXTRACT( day    from retention     ) * 24 * 60 +\n"
  Sql += "                 EXTRACT( hour   from retention     ) * 60 +\n"
  Sql += "                 EXTRACT( minute from retention     )) / (24 * 60))  ret_min\n"
  Sql += "     , LTRIM(topnsql)                                                topnsql\n"
  Sql += "  FROM dba_hist_wr_control;"

  # Execute the report
  ErrChk = False
  if (ConnStr != ''):
    (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
  else:
    (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)

  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
