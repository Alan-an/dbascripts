#!/bin/env python

##################################################################################################
#  Name:        sgastat                                                                          #
#  Author:      Randy Johnson                                                                    #
#  Description: Display SGA statistics (v$sgastat, gv$sgastat).                                  #
#                                                                                                #
#  usage: sgastat [options]                                                                      #
#                                                                                                #
#  options:                                                                                      #
#    -h, --help  show this help message and exit                                                 #
#    -g          search gv$sql (default is v$sql)                                                #
#    -s          print SQL query.                                                                #
#    -v          print version info.                                                             #
#                                                                                                #
# History:                                                                                       #
#                                                                                                #
# Date       Ver. Who              Change Description                                            #
# ---------- ---- ---------------- ------------------------------------------------------------- #
# 05/29/2014 1.00 Randy Johnson    Initial write.                                                #
# 07/17/2015 2.00 Randy Johnson    Updated for Python 2.4-3.4 compatibility.                     #
# 07/17/2015 2.20 Randy Johnson    Added prompts for username, password, tnsname.                #
# 09/28/2015 2.21 Randy Johnson    Cosmetic changes to the column format statements.             #
##################################################################################################

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from optparse     import OptionParser
from os           import environ
from os.path      import basename
from sys          import argv
from sys          import exit
from sys          import version_info
from signal       import SIGPIPE
from signal       import SIG_DFL
from signal       import signal
from Oracle       import RunSqlplus
from Oracle       import SetOracleEnv
from Oracle       import ParseConnectString


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0]).split('.')[0]
  CmdDesc        = 'SGA Statistics'
  Version        = '2.21'
  VersionDate    = 'Mon Sep 28 09:33:12 CDT 2015'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Sql            = ''
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ErrChk         = False
  ArgParser      = OptionParser()
  InStr          = ''
  ConnStr        = ''
  InstList       = []


  # For handling termination in stdout pipe; ex: when you run: oerrdump | head
  signal(SIGPIPE, SIG_DFL)

  # ------------------------------------------------
  # Imports that are conditional on Python Version.
  # ------------------------------------------------
  if (version_info[0] >= 3):
    from configparser import SafeConfigParser
  else:
    from ConfigParser import SafeConfigParser
  # ------------------------------------------------
  
  ArgParser.add_option('-g',  dest='Global',     action='store_true', default=False,                help="search gv$... (default v$...)")
  ArgParser.add_option('-i',  dest='Instances',                       default='',      type=str,    help="where inst_id in 1,2,3,...")
  ArgParser.add_option('-n',  dest='Name',                            default=''  ,    type=str,    help="where upper(name/pool) like '%...%'")
  ArgParser.add_option('--s', dest='Show',       action='store_true', default=False,                help="print SQL query.")
  ArgParser.add_option('--v', dest='ShowVer',    action='store_true', default=False,                help="print version info.")
  
  # Parse command line arguments
  Options, args = ArgParser.parse_args()

  Global    = Options.Global
  Instances = Options.Instances
  Global    = Options.Global   
  Instances = Options.Instances
  Name      = Options.Name     
  Show      = Options.Show
  ShowVer   = Options.ShowVer
  
  if (ShowVer):
    print('\n%s' % Banner)
    exit()
    
  # Assume gv$sysmetric if an instance list is specified.
  if (Global == False and Instances != ''):
    Global = True
  
  if(Instances != ''):
    InstList = Instances.split(',')
    try:
      if (version_info[0] >= 3):
        InstList = list(map(int, InstList))
        InstList = list(map(str, InstList))
      else:
        InstList = map(int, InstList)
        InstList = map(str, InstList)
    except:
      print("Instance list must be in integer form, eg. -i 1,2,3,4")
      exit(1)
  
  
  Sql += "column INST_ID     format 999             heading 'Inst'\n"
  Sql += "column POOL        format a25             heading 'Pool'\n"
  Sql += "column NAME        format a40             heading 'Name'\n"
  Sql += "column Megabytes   format 999,999,999.9   heading 'Megabytes'\n"
  Sql += "\n"
  Sql += "break on inst_id skip 1\n"
  Sql += '\n'
  Sql += "  SELECT " + SqlHeader + "\n"
  if (Global):
    Sql += "         inst_id\n"
    Sql += "       , pool\n"
  else:
    Sql += "         pool\n"
  Sql += "       , name\n"
  Sql += "       , bytes/1024/1024 megabytes\n"
  if (Global):
    Sql += "    FROM gv$sgastat\n"
  else:
    Sql += "    FROM v$sgastat\n"
  Sql += "   WHERE 1=1\n"
  if (Name != ''):
    Sql += "     AND (UPPER(name) like '%" + Name.upper() + "%' OR UPPER(pool) like '%" + Name.upper() + "%')\n"
  if (InstList != []):
    Sql += "     AND inst_id IN (" + Instances + ")\n"
  if (Global):
    Sql += "ORDER BY inst_id\n"
    Sql += "       , pool\n"
    Sql += "       , name;"
  else:
    Sql += "ORDER BY pool\n"
    Sql += "       , name;"


  Sql = Sql.strip()

  if(Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Check/setup the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  # Parse the connect string if any, prompt for username, password if needed.
  if (len(args) > 0 and Show == False):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)

  # Execute the report
  if (ConnStr != ''):
    (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
  else:
    (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)

  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
