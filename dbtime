#!/usr/bin/env python

##################################################################################################
#  Name:        dbtime                                                                           #
#  Author:      Randy Johnson                                                                    #
#  Description: Find busiest time periods in AWR.                                                #
#                                                                                                #
#  Usage: dbtime [options]                                                                       #
#                                                                                                #
#  Options:                                                                                      #
#    -h, --help      show this help message and exit                                             #
#    -b END_SNAP_ID  value for begin_snap_id                                                     #
#    -e END_SNAP_ID  value for end_snap_id                                                       #
#    -i INSTANCES    where inst_id in 1,2,3,...                                                  #
#    -r ROWS         limit output to nnn rows (default 30, 0=disable)                            #
#    -s              print SQL query.                                                            #
#    -v              print version info.                                                         #
#                                                                                                #
#  Example:                                                                                      #
#    dbtime -i 1                    # Filter output to a specific instance (default is all)      #
#    dbtime -b 12345                # Begin snapshot ID                                          #
#    dbtime -e 678910               # End snapshot ID                                            #
#    dbtime -l 50                   # Limit output to the top n dbtimes                          #
#    dbtime -s                      # prints the query generated by the options                  #
#                                                                                                #
#    All options may be combined.                                                                #
#                                                                                                #
# History:                                                                                       #
#                                                                                                #
# Date       Ver. Who              Change Description                                            #
# ---------- ---- ---------------- ------------------------------------------------------------- #
# 05/29/2014 1.00 Randy Johnson    Initial write.                                                #
# 07/17/2015 2.00 Randy Johnson    Updated for Python 2.4-3.4 compatibility. Added prompts for   #
#                                  username, password, tnsname.                                  #
# 08-25-2015 2.10 Randy Johnson    Added -l and -m options. Set EndTime default to 
##################################################################################################

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from datetime     import datetime
from optparse     import OptionParser
from os           import environ
from os.path      import basename
from sys          import argv
from sys          import exit
from sys          import version_info
from signal       import SIGPIPE
from signal       import SIG_DFL
from signal       import signal
from Oracle       import RunSqlplus
from Oracle       import SetOracleEnv
from Oracle       import ParseConnectString
from Oracle       import ValidateDate


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0]).split('.')[0]
  CmdDesc        = 'Db Time'
  Version        = '2.00'
  VersionDate    = 'Tue Sep 15 21:02:11 CDT 2015'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Sql            = ''
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ErrChk         = False
  ArgParser      = OptionParser()
  InStr          = ''
  ConnStr        = ''
  InstList       = []
  SqlText        = ''
  SqlId          = ''
  Now            = datetime.now()
  EndTime        = '3000-01-01 00:00:00'
  LowSnapId      = '0'
  MaxSnapId      = '9999999999999999999'

           
  # For handling termination in stdout pipe; ex: when you run: oerrdump | head
  signal(SIGPIPE, SIG_DFL)

  ArgParser.add_option('-b',  dest='BeginTime',                       default='1960-01-01 00:00:00', type=str, help="sample_time >= BeginTime   (default 1960-01-01 00:00:00)")
  ArgParser.add_option('-e',  dest='EndTime',                         default=EndTime,               type=str, help="sample_time <= EndTime     (default "  + EndTime + ")")
  ArgParser.add_option("-l",  dest="LowSnapId",                       default=LowSnapId,             type=str, help="where snap_id >= LowSnapId (default '" + LowSnapId + "')")
  ArgParser.add_option("-m",  dest="MaxSnapId",                       default=MaxSnapId,             type=str, help="where snap_id <= MaxSnapId (default '" + MaxSnapId + "')")  
  ArgParser.add_option('-i',  dest='Instances',                       default='',                    type=str, help="where inst_id in 1,2,3,...")
  ArgParser.add_option('-r',  dest='Rows',                            default=30,                    type=int, help="limit output to nnn rows (default 30, 0=disable)")
  ArgParser.add_option("--s", dest="Show",       action="store_true", default=False,                           help="print SQL query.")
  ArgParser.add_option("--v", dest="ShowVer",    action="store_true", default=False,                           help="print version info.")

  # Parse command line arguments
  Options, args = ArgParser.parse_args()

  BeginTime   = str(Options.BeginTime)
  EndTime     = str(Options.EndTime)
  LowSnapId   = str(Options.LowSnapId)
  MaxSnapId   = str(Options.MaxSnapId)
  Instances   = Options.Instances
  Rows        = str(Options.Rows)
  Show        = Options.Show
  ShowVer     = Options.ShowVer

  if (ShowVer):
    print('\n%s' % Banner)
    exit()

  if(Instances != ''):
    InstList = Instances.split(',')
    try:
      if (version_info[0] >= 3):
        InstList = list(map(int, InstList))
        InstList = list(map(str, InstList))
      else:
        InstList = map(int, InstList)
        InstList = map(str, InstList)
    except:
      print("Instance list must be in integer form, eg. -i 1,2,3,4")
      exit(1)

  if (LowSnapId != '0'):
    try:
      junk = int(LowSnapId)  
    except:
      print("\nLowSnapId (-l) must be an integer.")
      exit(1)

  if (MaxSnapId != '0'):
    try:
      junk = int(MaxSnapId)  
    except:
      print("\nHighSnap (-h) must be an integer.")
      exit(1)

  (ValidDate, BeginTimeFormat) = ValidateDate(BeginTime)
  if (ValidDate == False):
    print("\nInvalid format for BeginTime. Acceptable formats follow:")
    print("  YYYY-MM-DD")
    print("  YYYY-MM-DD HH24")
    print("  YYYY-MM-DD HH24:MI")
    print("  YYYY-MM-DD HH24:MI:SS")
    exit(1)

  (ValidDate, EndTimeFormat) = ValidateDate(EndTime)
  if (ValidDate == False):
    print("\nInvalid format for EndTime. Acceptable formats follow:")
    print("  YYYY-MM-DD")
    print("  YYYY-MM-DD HH24")
    print("  YYYY-MM-DD HH24:MI")
    print("  YYYY-MM-DD HH24:MI:SS")
    exit(1)

  Sql += "column begin_snap      format 9999999999     heading 'Begin Snap'\n"
  Sql += "column end_snap        format 9999999999     heading 'End Snap'\n"
  Sql += "column begin_timestamp format a19            heading 'Begin Timestamp'\n"
  Sql += "column inst            format 9999           heading 'Inst'\n"
  Sql += "column dbtime_min      format 999,999,999.99 heading 'DB Time (min)'\n"
  Sql += "\n"
  Sql += "SELECT " + SqlHeader + "\n"
  Sql += "       begin_snap\n"
  Sql += "     , end_snap\n"
  Sql += "     , begin_timestamp\n"
  Sql += "     , inst\n"
  Sql += "     , round(dbtime_min,2) dbtime_min\n"
  Sql += "  FROM (SELECT begin_snap,\n"
  Sql += "               end_snap,\n"
  Sql += "               to_char(timestamp, 'yyyy-mm-dd hh24:mi:ss') begin_timestamp,\n"
  Sql += "               inst,\n"
  Sql += "               a/1000000/60 dbtime_min\n"
  Sql += "          FROM (SELECT e.snap_id end_snap,\n"
  Sql += "                       lag(e.snap_id) OVER (order by e.snap_id) begin_snap,\n"
  Sql += "                       lag(s.end_interval_time) OVER (order by e.snap_id) timestamp,\n"
  Sql += "                       s.instance_number inst,\n"
  Sql += "                       e.value,\n"
  Sql += "                       NVL(value-lag(value) OVER (order by e.snap_id),0) a\n"
  Sql += "                  FROM dba_hist_sys_time_model e,\n"
  Sql += "                       dba_hist_snapshot s\n"
  Sql += "                 WHERE s.snap_id = e.snap_id\n"
  Sql += "                   AND s.begin_interval_time\n"
  Sql += "                         BETWEEN to_date('" + BeginTime + "','" + BeginTimeFormat + "')\n"
  Sql += "                             AND to_date('" + EndTime   + "','" + EndTimeFormat   + "')\n"
  Sql += "                   AND s.snap_id\n"
  Sql += "                         BETWEEN " + LowSnapId + "\n"
  Sql += "                             AND " + MaxSnapId + "\n";  
  Sql += "                   AND stat_name = 'DB time'\n"
  Sql += "                   AND e.instance_number = s.instance_number\n"
  if (InstList != []):
    Sql += "                   AND e.instance_number IN (" + Instances + ")\n"
  Sql += "               )\n"
  Sql += "         WHERE begin_snap=end_snap-1\n"
#  if (BeginTime != '0'):
#    Sql += "           AND begin_snap >= " + BeginTime + "\n";
#  if (EndTime != '0'):
#    Sql += "           AND end_snap <= " + EndTime + "\n";
  Sql += "         ORDER BY dbtime_min DESC\n";
  if (Rows != '0'):
    Sql += "      )\n"
    Sql += "WHERE rownum <= " + Rows + ";\n";
  else:
    Sql += "      );\n"
  Sql = Sql.strip()

  if(Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Check/setup the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  # Parse the connect string if any, prompt for username, password if needed.
  if (len(args) > 0 and Show == False):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)

  # Execute the report
  if (ConnStr != ''):
    (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
  else:
    (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)

  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
