#!/bin/env python

##################################################################################################
#  Name:        awr_plan_change                                                                  #
#  Author:      Randy Johnson                                                                    #
#  Description: Prints a report of SQL execution plan changes for a SQL_ID                       #
#                                                                                                #
#  Usage:        awr_plan_change [options]                                                       #
#  Options:                                                                                      #
#    -h, --help  show this help message and exit                                                 #
#    -i SQLID    value for sql_id                                                                #
#    -s          print SQL query                                                                 #
#    -v          print(version info.                                                             #
#                                                                                                #
# History:                                                                                       #
#                                                                                                #
# Date       Ver. Who              Change Description                                            #
# ---------- ---- ---------------- ------------------------------------------------------------- #
# 04/18/2012 1.00 Randy Johnson    Initial write.                                                #
# 07/21/2015 2.00 Randy Johnson    Updated print(statements for Python 3.4 compatibility.        #
# 08/01/2015 2.10 Randy Johnson    Added prompts for username, password, tnsname.                #
##################################################################################################

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from datetime     import datetime
from optparse     import OptionParser
from os           import environ
from os.path      import basename
from signal       import SIG_DFL
from signal       import SIGPIPE
from signal       import signal
from sys          import argv
from sys          import exit
from sys          import version_info
from Oracle       import ParseConnectString
from Oracle       import RunSqlplus
from Oracle       import SetOracleEnv
from Oracle       import ValidateDate


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0]).split('.')[0]
  CmdDesc        = 'AWR Plan Change'
  Version        = '2.10'
  VersionDate    = 'Tue Sep 15 21:02:11 CDT 2015'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Sql            = ''
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ErrChk         = False
  ArgParser      = OptionParser()
  InStr          = ''
  TnsName        = ''
  Username       = ''
  Password       = ''
  ConnStr        = ''
  Now            = datetime.now()
  EndTime        = (Now.strftime('%Y-%m-%d %H:%M:%S'))


  # For handling termination in stdout pipe; ex: when you run: oerrdump | head
  signal(SIGPIPE, SIG_DFL)

  ArgParser.add_option('-b',  dest='BeginTime',                      default='1960-01-01 00:00:00', type=str, help="AWR snap time >= BeginTime (default '1960-01-01 00:00:00')")
  ArgParser.add_option('-e',  dest='EndTime',                        default=EndTime,               type=str, help="AWR snap time <= EndTime   (default '" + EndTime + "')")
  ArgParser.add_option('-r',  dest='Rows',                           default=0,                     type=int, help="limit output to nnn rows (default 0=off)")
  ArgParser.add_option("-i",  dest="SqlId",                          default='',                    type=str,  help="value for sql_id")
  ArgParser.add_option("--s", dest="Show",      action="store_true", default=False,                            help="print SQL query")
  ArgParser.add_option('--v', dest='ShowVer',   action='store_true', default=False,                            help="print version info.")

  # Parse command line arguments
  Options, args = ArgParser.parse_args()

  BeginTime   = Options.BeginTime
  EndTime     = Options.EndTime
  Rows        = str(Options.Rows)
  SqlId       = Options.SqlId
  Show        = Options.Show
  ShowVer     = Options.ShowVer

  if (ShowVer == True):
    print('\n%s' % Banner)
    exit()

  (ValidDate, BeginTimeFormat) = ValidateDate(BeginTime)
  if (ValidDate == False):
    print("Invalid format for BeginTime. Acceptable formats follow:")
    print("  'YYYY-MM-DD'")
    print("  'YYYY-MM-DD HH24'")
    print("  'YYYY-MM-DD HH24:MI'")
    print("  'YYYY-MM-DD HH24:MI:SS'")
    exit(1)

  (ValidDate, EndTimeFormat) = ValidateDate(EndTime)
  if (ValidDate == False):
    print("Invalid format for EndTime. Acceptable formats follow:")
    print("  'YYYY-MM-DD'")
    print("  'YYYY-MM-DD HH24'")
    print("  'YYYY-MM-DD HH24:MI'")
    print("  'YYYY-MM-DD HH24:MI:SS'")
    exit(1)
  
  if (len(args) > 0 and Show == False):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)

  Sql  = "----------------------------------------------------------------------------------------\n"
  Sql += "-- File name:   awr_plan_change.sql\n"
  Sql += "-- Author:      Kerry Osborne\n"
  Sql += "--\n"
  Sql += "-- See http://kerryosborne.oracle-guy.com/2008/10/unstable-plans/ for more info.\n"
  Sql += "---------------------------------------------------------------------------------------\n"
  Sql += "column inst                format 999              heading 'Inst'\n"
  Sql += "column sql_id              format a13              heading 'SQL ID'\n"
  Sql += "column plan_hash_value     format 999999999999999  heading 'Plan Hash Value'\n"
  Sql += "column snap_id             format 9999999999       heading 'Snapshot ID'\n"
  Sql += "column execs               format 999,999,999      heading 'Executions'\n"
  Sql += "column avg_etime           format 999,999.999      heading 'Avg Ela Time'\n"
  Sql += "column avg_lio             format 999,999,999.9    heading 'Avg LIOs'\n"
  Sql += "column begin_interval_time format a19              heading 'Begin Interval Time'\n"
  Sql += "\n"
  Sql += "break on plan_hash_value on startup_time skip 1\n"
  Sql += "\n"
  Sql += "SELECT " + SqlHeader + "\n"
  Sql += "       ss.snap_id\n"
  Sql += "     , ss.instance_number inst\n"
  Sql += "     , to_char(ss.begin_interval_time,'yyyy-mm-dd hh24:mi:ss') begin_interval_time\n"
  Sql += "     , s.sql_id\n"
  Sql += "     , s.plan_hash_value\n"
  Sql += "     , nvl(s.executions_delta,0) execs\n"
  Sql += "     , (s.elapsed_time_delta/decode(nvl(s.executions_delta,0),0,1,s.executions_delta))/1000000 avg_etime\n"
  Sql += "     , (s.buffer_gets_delta/decode(nvl(s.buffer_gets_delta,0),0,1,s.executions_delta)) avg_lio\n"
  Sql += "  FROM DBA_HIST_SQLSTAT s\n"
  Sql += "     , DBA_HIST_SNAPSHOT ss\n"
  if (SqlId != ''):
    Sql += " WHERE s.sql_id = '" + SqlId + "'\n"
    Sql += "   AND ss.snap_id = s.snap_id\n"
  else:
    Sql += " WHERE ss.snap_id = s.snap_id\n"
  Sql += "   AND ss.instance_number = s.instance_number\n"
  Sql += "   AND s.executions_delta > 0\n"
  if (Rows != '0'):
    Sql += "   AND rownum <= " + Rows + "\n";
  Sql += "   AND ss.begin_interval_time >= TO_DATE('" + BeginTime + "', '" + BeginTimeFormat + "')\n"
  Sql += "   AND ss.end_interval_time   <= TO_DATE('" + EndTime   + "', '" + EndTimeFormat   + "')\n"
  Sql += " ORDER BY ss.snap_id\n"
  Sql += "        , ss.instance_number\n"
  Sql += "        , to_char(ss.begin_interval_time,'yyyy-mm-dd hh24:mi:ss');\n"

  Sql = Sql.strip()

  if(Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Check/setup the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  # Parse the connect string if any, prompt for username, password if needed.
  if (len(args) > 0 and Show == False):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)

  # Execute the report
  if (ConnStr != ''):
    (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
  else:
    (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)

  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
