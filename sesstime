#!/bin/env python

##################################################################################################
#  Name:        sesstime                                                                         #
#  Author:      Randy Johnson                                                                    #
#  Description: This script prints a report from V$SESS_TIME_MODEL and GV$SESS_TIME_MODEL.       #
#                                                                                                #
#  Usage: sesstime [options]                                                                     #
#                                                                                                #
#  Options:                                                                                      #
#    -h, --help    show this help message and exit                                               #
#    -g            search gv$sysemtric (default is v$sysmetric)                                  #
#    -i INSTANCES  where inst_id in 1,2,3,...                                                    #
#    -m NAME       where upper(stat_name) like '%CPU%'                                           #
#    -t SID        where sid = 123                                                               # 
#    -s            print SQL query.                                                              #
#    -v            print version info.                                                           #
#                                                                                                #
# History:                                                                                       #
#                                                                                                #
# Date       Ver. Who              Change Description                                            #
# ---------- ---- ---------------- ------------------------------------------------------------- #
# 07/31/2015 1.00 Randy Johnson    Initial write.                                                #
##################################################################################################

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from optparse     import OptionParser
from os           import environ
from os.path      import basename
from sys          import argv
from sys          import exit
from sys          import version_info
from signal       import SIGPIPE
from signal       import SIG_DFL
from signal       import signal
from Oracle       import RunSqlplus
from Oracle       import SetOracleEnv
from Oracle       import ParseConnectString


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0]).split('.')[0]
  CmdDesc        = 'Report Session Time'
  Version        = '1.00'
  VersionDate    = 'Tue Sep 15 21:02:11 CDT 2015'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Sql            = ''
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ErrChk         = False
  ArgParser      = OptionParser()
  Sid            = 0
  InStr          = ''
  ConnStr        = ''
  InstList       = []


  # For handling termination in stdout pipe; ex: when you run: oerrdump | head
  signal(SIGPIPE, SIG_DFL)

  # Check/setup the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  ArgParser.add_option('-g',  dest='Global',     action='store_true', default=False,            help="search gv$sysemtric (default is v$sysmetric)")
  ArgParser.add_option('-i',  dest='Instances',                       default='',    type=str,  help="where inst_id in 1,2,3,...")
  ArgParser.add_option('-m',  dest='Name',                            default='',    type=str,  help="where upper(stat_name) like '%CPU%'")
  ArgParser.add_option('-t',  dest='Sid',                             default=0,     type=int,  help="where sid = 123")
  ArgParser.add_option('--s', dest='Show',       action='store_true', default=False,            help="print SQL query.")
  ArgParser.add_option('--v', dest='ShowVer',    action='store_true', default=False,            help="print version info.")
  
  # Parse command line arguments
  Options, args = ArgParser.parse_args()

  Global    = Options.Global
  Instances = Options.Instances
  Name      = Options.Name
  Sid       = Options.Sid
  Show      = Options.Show
  ShowVer   = Options.ShowVer
  
  if (ShowVer == True):
    print('\n%s' % Banner)
    exit()
    
  # Assume gv$sysmetric if an instance list is specified.
  if (Global == False and Instances != ''):
    Global = True

  # Set the session id
  Sid = str(Sid)

  if(Instances != ''):
    InstList = Instances.split(',')
    try:
      if (version_info[0] >= 3):
        InstList = list(map(int, InstList))
        InstList = list(map(str, InstList))
      else:
        InstList = map(int, InstList)
        InstList = map(str, InstList)
    except:
      print("Instance list must be in integer form, eg. -i 1,2,3,4")
      exit(1)

  Sql += "column inst_id     format 9999                         heading 'Inst'\n"
  Sql += "column sid         format 999999999                    heading 'SID'\n"
  Sql += "column stat_name   format a60                          heading 'Statistic'\n"
  Sql += "column value       format 999,999,999,999,999,999.99   heading 'Seconds'\n"
  if (Global == True): 
    Sql += "break on inst_id on sid skip 1 on inst_id on sid\n"
  else:
    Sql += "break on sid skip 1 on sid\n"
  Sql += "\n"
  Sql += "  SELECT " + SqlHeader + "\n"
  if (Global == True):
    Sql += "         inst_id\n"
    Sql += "       , sid\n"
  else:
    Sql += "         sid\n"
  Sql += "       , stat_name\n"
  Sql += "       , TRUNC(value/1000000,2) value\n"
  if (Global == True):
    Sql += "    FROM gv$sess_time_model\n"
  else:
    Sql += "    FROM v$sess_time_model\n"
  if (Name != '' or InstList != [] or Sid != '0'):
    Sql += "   WHERE 1=1\n"
  if (Sid != '0'):
    Sql += "     AND sid = " + Sid + "\n"
  if (Name != ''):
    Sql += "     AND upper(stat_name) LIKE upper('%" + Name + "%') \n"
  if (Instances != ''):
    Sql += "     AND inst_id IN(" + Instances + ")\n"
  if (Global == True):
    Sql += "ORDER BY inst_id\n"
    Sql += "       , sid\n"
  else:
    Sql += "ORDER BY sid\n"
  Sql += "       , value DESC;\n"

  Sql = Sql.strip()

  if(Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Check/setup the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  # Parse the connect string if any, prompt for username, password if needed.
  if (len(args) > 0 and Show == False):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)

  # Execute the report
  if (ConnStr != ''):
    (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
  else:
    (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)

  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
