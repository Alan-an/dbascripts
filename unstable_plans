#!/bin/env python

##################################################################################################
# Name:        unstable_plans                                                                    #
# Author:      Randy Johnson                                                                     #
# Description: Attempts to find SQL statements with plan instability.                            #
#              This scripts prompts for two values, both of which can be left blank.             #
#                min_stddev: the minimum "normalized" standard deviation between plans           #
#                            (the default is 2)                                                  #
#                min_etime:  only include statements that have an avg. etime > this value        #
#                            (the default is .1 second)                                          #
#                                                                                                #
# Usage: unstable_plans [options]                                                                #
#                                                                                                #
# Options:                                                                                       #
#   -h, --help     show this help message and exit                                               #
#   -d MINSTDDEV   minimum threshold for standard deviation (default=2)                          #
#   -e MINELATIME  minimum threshold for max_etime (default=.1)                                  #
#   -i MINSNAPID   earliest snapshot id (default=0)                                              #
#   -s             print SQL query.                                                              #
#   -v             print version info.                                                           #
#                                                                                                #
#  SQL ID          Executions Min. Exec Time Max. Exec Time Norm. Std. Dev.                      #
#  ------------- ------------ -------------- -------------- ---------------                      #
#  c6ksc6kfhjjc6            1            .06            .41          4.2561                      #
#  b2uuugg5hqv2q           42            .06          18.72        150.8563                      #
#  7qqccwcvkgh0y           42            .06          19.45        152.1602                      #
#  fadmfv2wzjr9p           42            .06          19.41        153.5610                      #
#  dw3h6kdu70g1x           32            .06          20.10        173.3276                      #
#  gn3my9dvyqzq1           32            .05          18.32        177.9843                      #
#  afymdvxpp7gab           52            .01           3.63        229.3225                      #
#                                                                                                #
# History:                                                                                       #
#                                                                                                #
# Date       Ver. Who              Change Description                                            #
# ---------- ---- ---------------- ------------------------------------------------------------- #
# 04/18/2012 1.00 Randy Johnson    Initial write.                                                #
# 07/17/2015 2.00 Randy Johnson    Updated for Python 2.4-3.4 compatibility.                     #
# 07/23/2015 2.20 Randy Johnson    Added prompts for username, password, tnsname.                #
##################################################################################################

# --------------------------------------
# ---- Import Python Modules -----------
# --------------------------------------
from optparse     import OptionParser
from os           import environ
from os.path      import basename
from sys          import argv
from sys          import exit
from sys          import version_info
from signal       import SIGPIPE
from signal       import SIG_DFL
from signal       import signal
from Oracle       import RunSqlplus
from Oracle       import SetOracleEnv
from Oracle       import ParseConnectString


# --------------------------------------
# ---- Main Program --------------------
# --------------------------------------
if (__name__ == '__main__'):
  Cmd            = basename(argv[0]).split('.')[0]
  CmdDesc        = 'Unstable Plans'
  Version        = '2.20'
  VersionDate    = 'Tue Sep 15 21:02:11 CDT 2015'
  DevState       = 'Production'
  Banner         = CmdDesc + ': Release ' + Version + ' '  + DevState + '. Last updated: ' + VersionDate
  Sql            = ''
  SqlHeader      = '/***** ' + CmdDesc.upper() + ' *****/'
  ErrChk         = False
  ArgParser      = OptionParser()
  InStr          = ''
  ConnStr        = ''


  # For handling termination in stdout pipe; ex: when you run: oerrdump | head
  signal(SIGPIPE, SIG_DFL)

  # ------------------------------------------------
  # Imports that are conditional on Python Version.
  # ------------------------------------------------
  if (version_info[0] >= 3):
    from configparser import SafeConfigParser
  else:
    from ConfigParser import SafeConfigParser
  # ------------------------------------------------

  ArgParser.add_option("-d", dest="MinStdDev",                       default='2',   type=str, help="minimum threshold for standard deviation (default=2)")
  ArgParser.add_option("-e", dest="MinElaTime",                      default='.1',  type=str, help="minimum threshold for max_etime (default=.1)")
  ArgParser.add_option("-i", dest="MinSnapId",                       default='0',   type=str, help="earliest snapshot id (default=0)")
  ArgParser.add_option('--s', dest='Show',      action='store_true', default=False,           help="print SQL query.")
  ArgParser.add_option('--v', dest='ShowVer',   action='store_true', default=False,           help="print version info.")

  # Parse command line arguments
  Options, args = ArgParser.parse_args()

  MinStdDev   = Options.MinStdDev
  MinElaTime  = Options.MinElaTime
  MinSnapId   = Options.MinSnapId
  Show        = Options.Show
  ShowVer     = Options.ShowVer

  if (ShowVer):
    print('\n%s' % Banner)
    exit()

  Sql += "----------------------------------------------------------------------------------------\n"
  Sql += "-- File name:   unstable_plans.sql\n"
  Sql += "-- Purpose:     Attempts to find SQL statements with plan instability.\n"
  Sql += "-- Author:      Kerry Osborne\n"
  Sql += "-- Usage:       This scripts prompts for two values, both of which can be left blank.\n"
  Sql += "--              min_stddev: the minimum 'normalized' standard deviation between plans\n"
  Sql += "--                          (the default is 2)\n"
  Sql += "--              min_etime:  only include statements that have an avg. etime > this value\n"
  Sql += "--                          (the default is .1 second)\n"
  Sql += "--             Updated to handle very long running SQL statements that cross snapshots.\n"
  Sql += "--\n"
  Sql += "-- See http://kerryosborne.oracle-guy.com/2008/10/unstable-plans/ for more info.\n"
  Sql += "---------------------------------------------------------------------------------------\n"
  Sql += "set    heading             on\n"
  Sql += "set    pagesize            50000\n"
  Sql += "column sql_id              format a13           heading 'SQL ID'\n"
  Sql += "column execs               format 999,999,999   heading 'Executions'\n"
  Sql += "column min_etime           format 999,999.99    heading 'Min. Exec Time'\n"
  Sql += "column max_etime           format 999,999.99    heading 'Max. Exec Time'\n"
  Sql += "column norm_stddev         format 999,999.9999  heading 'Norm. Std. Dev.'\n"
  Sql += "\n"
  Sql += "break on plan_hash_value on startup_time skip 1\n"
  Sql += "\n"
  Sql += "  SELECT " + SqlHeader + "\n"
  Sql += "         c.*\n"
  Sql += "    FROM (  SELECT b.sql_id\n"
  Sql += "                 , SUM(b.execs) execs\n"
  Sql += "                 , MIN(b.avg_etime) min_etime\n"
  Sql += "                 , MAX(b.avg_etime) max_etime\n"
  Sql += "                 , b.stddev_etime / MIN(b.avg_etime) norm_stddev\n"
  Sql += "              FROM (SELECT a.sql_id\n"
  Sql += "                         , a.plan_hash_value\n"
  Sql += "                         , a.execs\n"
  Sql += "                         , a.avg_etime\n"
  Sql += "                         , STDDEV(a.avg_etime) OVER (PARTITION BY a.sql_id) stddev_etime\n"
  Sql += "                      FROM (   SELECT s.sql_id\n"
  Sql += "                                    , s.plan_hash_value\n"
  Sql += "                                    , SUM(NVL(s.executions_delta, 0)) execs\n"
  Sql += "                                    , (SUM(s.elapsed_time_delta)/\n"
  Sql += "                                        DECODE(SUM(NVL(s.executions_delta, 0)), 0, 1,\n"
  Sql += "                                        SUM(s.executions_delta))/1000000) avg_etime\n"
  Sql += "                                 FROM dba_hist_sqlstat s, dba_hist_snapshot ss\n"
  Sql += "                                WHERE ss.snap_id = S.snap_id\n"
  Sql += "                                  AND ss.instance_number = S.instance_number\n"
  Sql += "                                  AND elapsed_time_delta > 0\n"
  Sql += "                                  AND s.snap_id > '" + MinSnapId + "'\n"
  Sql += "                             GROUP BY sql_id, plan_hash_value\n"
  Sql += "                           ) a\n"
  Sql += "                   ) b\n"
  Sql += "          GROUP BY b.sql_id\n"
  Sql += "                 , b.stddev_etime\n"
  Sql += "         ) c\n"
  Sql += "   WHERE norm_stddev >= " + MinStdDev + "\n"
  Sql += "     AND max_etime   >= " + MinElaTime + "\n"
  Sql += "ORDER BY norm_stddev;"

  Sql = Sql.strip()

  if(Show):
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    print(Sql)
    print('-----------cut-----------cut-----------cut-----------cut-----------cut-----------')
    exit()

  # Check/setup the Oracle environment
  if (not('ORACLE_SID' in list(environ.keys()))):
    print('ORACLE_SID is required.')
    exit(1)
  else:
    # Set the ORACLE_HOME just in case it isn't set already.
    if (not('ORACLE_HOME' in list(environ.keys()))):
      (OracleSid, OracleHome) = SetOracleEnv(environ['ORACLE_SID'])

  # Parse the connect string if any, prompt for username, password if needed.
  if (len(args) > 0 and Show == False):
    InStr = args[0]
    ConnStr = ParseConnectString(InStr)

  # Execute the report
  if (ConnStr != ''):
    (Stdout) = RunSqlplus(Sql, ErrChk, ConnStr)
  else:
    (Stdout) = RunSqlplus(Sql, ErrChk)

  # Print the report
  if (Stdout != ''):
    print('\n%s' % Stdout)

  exit(0)
# --------------------------------------
# ---- End Main Program ----------------
# --------------------------------------
